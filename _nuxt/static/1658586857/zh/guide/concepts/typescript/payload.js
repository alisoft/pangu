__NUXT_JSONP__("/zh/guide/concepts/typescript", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W){return {data:[{page:{key:"content:zh:2.guide:1.concepts:6.typescript.md",generatedAt:new Date(1658586934260),mtime:new Date(1658586934252),slug:v,title:w,position:"000200010006",to:"\u002Fguide\u002Fconcepts\u002Ftypescript",draft:k,page:l,language:"zh",empty:k,description:x,excerpt:y,body:{raw:"# TypeScript\n\nNuxt 3 is fully typed and provides helpful shortcuts to ensure you have access to accurate type information when you are coding.\n\n## Type-checking\n\nBy default, Nuxt doesn't check types when you run `nuxi dev` or `nuxi build`, for performance reasons. However, you can enable type-checking at build or development time with [the `typescript.typeCheck` option in your `nuxt.config` file](\u002Fapi\u002Fconfiguration\u002Fnuxt.config#typescript), or [manually check your types with nuxi](\u002Fapi\u002Fcommands\u002Ftypecheck).\n\n```bash\nyarn nuxi typecheck\n```\n\n## Auto-generated types\n\nWhen you run `nuxi dev` or `nuxi build`, Nuxt generates the following files for IDE type support (and type checking):\n\n### `.nuxt\u002Fnuxt.d.ts`\n\nThis file contains the types of any modules you are using, as well as the key types that Nuxt 3 requires. Your IDE should recognize these types automatically.\n\nSome of the references in the file are to files that are only generated within your `buildDir` (`.nuxt`) and therefore for full typings, you will need to run `nuxi dev` or `nuxi build`.\n\n### `.nuxt\u002Ftsconfig.json`\n\nThis file contains the recommended basic TypeScript configuration for your project, including resolved aliases injected by Nuxt or modules you are using, so you can get full type support and path auto-complete for aliases like `~\u002Ffile` or `#build\u002Ffile`.\n\n[Read more about how to extend this configuration](\u002Fguide\u002Fdirectory-structure\u002Ftsconfig).\n\n::alert{icon=ðŸ‘‰}\nNitro also [auto-generates types](\u002Fguide\u002Fconcepts\u002Fserver-engine#typed-api-routes) for API routes. Plus, Nuxt also generates types for globally available components and [auto-imports from your composables](\u002Fguide\u002Fdirectory-structure\u002Fcomposables), plus other core functionality.\n::\n\n::alert\nKeep in mind that all options extended from `.\u002F.nuxt\u002Ftsconfig.json` will be overwritten by the options defined in your `tsconfig.json`.\nOverwriting options such as `\"compilerOptions.paths\"` with your own configuration will lead TypeScript to not factor in the module resolutions from `.\u002F.nuxt\u002Ftsconfig.json`. This can lead to module resolutions such as `#imports` not being recognized.\n\nIn case you need to extend options provided by `.\u002F.nuxt\u002Ftsconfig.json` further, you can use the `alias` property within your `nuxt.config`. `nuxi` will pick them up and extend `.\u002F.nuxt\u002Ftsconfig.json` accordingly.\n::\n\n## Stricter checks\n\nTypeScript comes with certain checks to give you more safety and analysis of your program.\n\nOnce youâ€™ve converted your codebase to TypeScript and felt familiar with it, you can start enabling these checks for greater safety ([read more](https:\u002F\u002Fwww.typescriptlang.org\u002Fdocs\u002Fhandbook\u002Fmigrating-from-javascript.html#getting-stricter-checks)).\n\nIn order to enable strict type checking, you have to update `nuxt.config`:\n\n```js\nexport default defineNuxtConfig({\n  typescript: {\n    strict: true\n  }\n})\n```\n",ast:{type:"root",children:[{type:b,tag:"prose-h1",props:{class:"d-heading-title",id:v},children:[{type:a,value:w}]},{type:a,value:d},{type:b,tag:e,props:{class:"d-heading-description"},children:[{type:a,value:x}]},{type:a,value:d},{type:b,tag:q,props:{id:z},children:[{type:b,tag:h,props:{href:"#type-checking"},children:[{type:a,value:A}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"By default, Nuxt doesn't check types when you run "},{type:b,tag:c,props:{},children:[{type:a,value:r}]},{type:a,value:m},{type:b,tag:c,props:{},children:[{type:a,value:s}]},{type:a,value:", for performance reasons. However, you can enable type-checking at build or development time with "},{type:b,tag:h,props:{href:"\u002Fapi\u002Fconfiguration\u002Fnuxt.config#typescript"},children:[{type:a,value:"the "},{type:b,tag:c,props:{},children:[{type:a,value:"typescript.typeCheck"}]},{type:a,value:" option in your "},{type:b,tag:c,props:{},children:[{type:a,value:t}]},{type:a,value:" file"}]},{type:a,value:", or "},{type:b,tag:h,props:{href:"\u002Fapi\u002Fcommands\u002Ftypecheck"},children:[{type:a,value:"manually check your types with nuxi"}]},{type:a,value:n}]},{type:a,value:d},{type:b,tag:B,props:{},children:[{type:b,tag:C,props:{className:[D,"language-bash"]},children:[{type:b,tag:E,props:{},children:[{type:b,tag:f,props:{className:[g,F]},children:[{type:a,value:"yarn"}]},{type:a,value:" nuxi typecheck\n"}]}]}]},{type:a,value:d},{type:b,tag:q,props:{id:G},children:[{type:b,tag:h,props:{href:"#auto-generated-types"},children:[{type:a,value:H}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"When you run "},{type:b,tag:c,props:{},children:[{type:a,value:r}]},{type:a,value:m},{type:b,tag:c,props:{},children:[{type:a,value:s}]},{type:a,value:", Nuxt generates the following files for IDE type support (and type checking):"}]},{type:a,value:d},{type:b,tag:I,props:{id:J},children:[{type:b,tag:h,props:{href:"#nuxtnuxtdts"},children:[{type:b,tag:c,props:{},children:[{type:a,value:K}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This file contains the types of any modules you are using, as well as the key types that Nuxt 3 requires. Your IDE should recognize these types automatically."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Some of the references in the file are to files that are only generated within your "},{type:b,tag:c,props:{},children:[{type:a,value:"buildDir"}]},{type:a,value:" ("},{type:b,tag:c,props:{},children:[{type:a,value:".nuxt"}]},{type:a,value:") and therefore for full typings, you will need to run "},{type:b,tag:c,props:{},children:[{type:a,value:r}]},{type:a,value:m},{type:b,tag:c,props:{},children:[{type:a,value:s}]},{type:a,value:n}]},{type:a,value:d},{type:b,tag:I,props:{id:L},children:[{type:b,tag:h,props:{href:"#nuxttsconfigjson"},children:[{type:b,tag:c,props:{},children:[{type:a,value:M}]}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"This file contains the recommended basic TypeScript configuration for your project, including resolved aliases injected by Nuxt or modules you are using, so you can get full type support and path auto-complete for aliases like "},{type:b,tag:c,props:{},children:[{type:a,value:"~\u002Ffile"}]},{type:a,value:m},{type:b,tag:c,props:{},children:[{type:a,value:"#build\u002Ffile"}]},{type:a,value:n}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:b,tag:h,props:{href:"\u002Fguide\u002Fdirectory-structure\u002Ftsconfig"},children:[{type:a,value:"Read more about how to extend this configuration"}]},{type:a,value:n}]},{type:a,value:d},{type:b,tag:N,props:{icon:"ðŸ‘‰"},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Nitro also "},{type:b,tag:h,props:{href:"\u002Fguide\u002Fconcepts\u002Fserver-engine#typed-api-routes"},children:[{type:a,value:"auto-generates types"}]},{type:a,value:" for API routes. Plus, Nuxt also generates types for globally available components and "},{type:b,tag:h,props:{href:"\u002Fguide\u002Fdirectory-structure\u002Fcomposables"},children:[{type:a,value:"auto-imports from your composables"}]},{type:a,value:", plus other core functionality."}]}]},{type:a,value:d},{type:b,tag:N,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"Keep in mind that all options extended from "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" will be overwritten by the options defined in your "},{type:b,tag:c,props:{},children:[{type:a,value:"tsconfig.json"}]},{type:a,value:".\nOverwriting options such as "},{type:b,tag:c,props:{},children:[{type:a,value:"\"compilerOptions.paths\""}]},{type:a,value:" with your own configuration will lead TypeScript to not factor in the module resolutions from "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:". This can lead to module resolutions such as "},{type:b,tag:c,props:{},children:[{type:a,value:"#imports"}]},{type:a,value:" not being recognized."}]},{type:b,tag:e,props:{},children:[{type:a,value:"In case you need to extend options provided by "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" further, you can use the "},{type:b,tag:c,props:{},children:[{type:a,value:"alias"}]},{type:a,value:" property within your "},{type:b,tag:c,props:{},children:[{type:a,value:t}]},{type:a,value:". "},{type:b,tag:c,props:{},children:[{type:a,value:"nuxi"}]},{type:a,value:" will pick them up and extend "},{type:b,tag:c,props:{},children:[{type:a,value:o}]},{type:a,value:" accordingly."}]}]},{type:a,value:d},{type:b,tag:q,props:{id:O},children:[{type:b,tag:h,props:{href:"#stricter-checks"},children:[{type:a,value:P}]}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"TypeScript comes with certain checks to give you more safety and analysis of your program."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"Once youâ€™ve converted your codebase to TypeScript and felt familiar with it, you can start enabling these checks for greater safety ("},{type:b,tag:h,props:{href:"https:\u002F\u002Fwww.typescriptlang.org\u002Fdocs\u002Fhandbook\u002Fmigrating-from-javascript.html#getting-stricter-checks",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"read more"}]},{type:a,value:")."}]},{type:a,value:d},{type:b,tag:e,props:{},children:[{type:a,value:"In order to enable strict type checking, you have to update "},{type:b,tag:c,props:{},children:[{type:a,value:t}]},{type:a,value:u}]},{type:a,value:d},{type:b,tag:B,props:{},children:[{type:b,tag:C,props:{className:[D,"language-js"]},children:[{type:b,tag:E,props:{},children:[{type:b,tag:f,props:{className:[g,Q,R]},children:[{type:a,value:"export"}]},{type:a,value:p},{type:b,tag:f,props:{className:[g,Q,R]},children:[{type:a,value:"default"}]},{type:a,value:p},{type:b,tag:f,props:{className:[g,F]},children:[{type:a,value:"defineNuxtConfig"}]},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:"("}]},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:S}]},{type:a,value:"\n  typescript"},{type:b,tag:f,props:{className:[g,T]},children:[{type:a,value:u}]},{type:a,value:p},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:S}]},{type:a,value:"\n    strict"},{type:b,tag:f,props:{className:[g,T]},children:[{type:a,value:u}]},{type:a,value:p},{type:b,tag:f,props:{className:[g,"boolean"]},children:[{type:a,value:"true"}]},{type:a,value:"\n  "},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:U}]},{type:a,value:d},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:U}]},{type:b,tag:f,props:{className:[g,i]},children:[{type:a,value:")"}]},{type:a,value:d}]}]}]}]},toc:{title:V,searchDepth:j,depth:j,links:[{id:z,depth:j,text:A},{id:G,depth:j,text:H,children:[{id:J,depth:W,text:K},{id:L,depth:W,text:M}]},{id:O,depth:j,text:P}]}},template:"Docs"},templateOptions:{header:l,footer:l,aside:l,asideClass:V,fluid:k,banner:k},_img:{}}],fetch:{"0":{headerLinks:[{title:"Getting Started",to:"\u002Fgetting-started\u002Fquick-start"},{title:"Guide",to:"\u002Fguide\u002Fconcepts\u002Fintroduction"},{title:"API",to:"\u002Fapi\u002Fcomposables\u002Fuse-async-data"},{title:"ç¤ºä¾‹",to:"\u002Fexamples\u002Fessentials\u002Fhello-world"},{title:"ç¤¾åŒº",to:"\u002Fcommunity\u002Fgetting-help"}]},"1":{repoUrl:"https:\u002F\u002Fgithub.com\u002Fpangu-dev\u002Fpangu",prev:{slug:"server-engine",to:"\u002Fguide\u002Fconcepts\u002Fserver-engine",title:"Server Engine"},next:{slug:"views",to:"\u002Fguide\u002Ffeatures\u002Fviews",title:"Views"}},_lazyComponents:new Set(["ProseParagraph","ButtonLink","HomeHero","SectionContentItem","HomeFeatures","IconNuxtNitro","Headline","ProseStrong","ProseA","ProseCodeInline","NuxtContainer","IconNuxtBridge","ProseH3","ProseLi","ProseUl","List","ProseH1","ProseH2","ProseCode","Alert","CodeGroup","ProseEm","ReadMore","Sandbox","ProseTh","ProseTr","ProseThead","ProseTd","ProseTbody","ProseTable","ProseBlockquote","ProseImg","NeedContribution","LinkExample","ProseOl","ProseH4","IconCloud","LogoAzure","LogoCloudFlare","LogoFirebase","LogoNetlify","LogoVercel"])},mutations:y}}("text","element","prose-code-inline","\n","prose-paragraph","span","token","prose-a","punctuation",2,false,true," or ",".",".\u002F.nuxt\u002Ftsconfig.json"," ","prose-h2","nuxi dev","nuxi build","nuxt.config",":","typescript","TypeScript","Nuxt 3 is fully typed and provides helpful shortcuts to ensure you have access to accurate type information when you are coding.",void 0,"type-checking","Type-checking","prose-code","pre","line-numbers","code","function","auto-generated-types","Auto-generated types","prose-h3","nuxtnuxtdts",".nuxt\u002Fnuxt.d.ts","nuxttsconfigjson",".nuxt\u002Ftsconfig.json","alert","stricter-checks","Stricter checks","keyword","module","{","operator","}","",3)));