__NUXT_JSONP__("/guide/directory-structure/tsconfig", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){return {data:[{page:{key:"content:2.guide:3.directory-structure:19.tsconfig.md",generatedAt:new Date(1658583558841),mtime:new Date(1658583558838),slug:i,title:j,position:"000200030019",to:"\u002Fguide\u002Fdirectory-structure\u002Ftsconfig",draft:g,page:h,language:"en",icon:"IconFile",head:{title:k},empty:g,description:"Nuxt automatically generates a .nuxt\u002Ftsconfig.json file with the resolved aliases you are using in your Nuxt project, as well as with other sensible defaults. You can benefit from this by creating a tsconfig.json in the root of your project with the following content:",excerpt:l,body:{raw:"---\nicon: IconFile\ntitle: tsconfig.json\nhead.title: TypeScript configuration file\n---\n\n# TypeScript configuration file\n\nNuxt [automatically generates](\u002Fguide\u002Fconcepts\u002Ftypescript) a `.nuxt\u002Ftsconfig.json` file with the resolved aliases you are using in your Nuxt project, as well as with other sensible defaults. You can benefit from this by creating a `tsconfig.json` in the root of your project with the following content:\n\n```json\n{\n  \"extends\": \".\u002F.nuxt\u002Ftsconfig.json\"\n}\n```\n\nAs you need to, you can customize the contents of this file. However, note that if you need to customize your `paths`, this will override the auto-generated path aliases. Instead, we recommend that you add any path aliases you need to the `alias` property within your `nuxt.config`, where they will get picked up and added to the autogenerated `tsconfig`.\n",ast:{type:"root",children:[{type:b,tag:"prose-h1",props:{class:"d-heading-title",id:"typescript-configuration-file"},children:[{type:a,value:k}]},{type:a,value:d},{type:b,tag:m,props:{class:"d-heading-description"},children:[{type:a,value:"Nuxt "},{type:b,tag:"prose-a",props:{href:"\u002Fguide\u002Fconcepts\u002Ftypescript"},children:[{type:a,value:"automatically generates"}]},{type:a,value:" a "},{type:b,tag:c,props:{},children:[{type:a,value:".nuxt\u002Ftsconfig.json"}]},{type:a,value:" file with the resolved aliases you are using in your Nuxt project, as well as with other sensible defaults. You can benefit from this by creating a "},{type:b,tag:c,props:{},children:[{type:a,value:j}]},{type:a,value:" in the root of your project with the following content:"}]},{type:a,value:d},{type:b,tag:"prose-code",props:{},children:[{type:b,tag:"pre",props:{className:["language-json","line-numbers"]},children:[{type:b,tag:"code",props:{},children:[{type:b,tag:e,props:{className:[f,n]},children:[{type:a,value:"{"}]},{type:a,value:"\n  "},{type:b,tag:e,props:{className:[f,"property"]},children:[{type:a,value:"\"extends\""}]},{type:b,tag:e,props:{className:[f,"operator"]},children:[{type:a,value:":"}]},{type:a,value:" "},{type:b,tag:e,props:{className:[f,"string"]},children:[{type:a,value:"\".\u002F.nuxt\u002Ftsconfig.json\""}]},{type:a,value:d},{type:b,tag:e,props:{className:[f,n]},children:[{type:a,value:"}"}]},{type:a,value:d}]}]}]},{type:a,value:d},{type:b,tag:m,props:{},children:[{type:a,value:"As you need to, you can customize the contents of this file. However, note that if you need to customize your "},{type:b,tag:c,props:{},children:[{type:a,value:"paths"}]},{type:a,value:", this will override the auto-generated path aliases. Instead, we recommend that you add any path aliases you need to the "},{type:b,tag:c,props:{},children:[{type:a,value:"alias"}]},{type:a,value:" property within your "},{type:b,tag:c,props:{},children:[{type:a,value:"nuxt.config"}]},{type:a,value:", where they will get picked up and added to the autogenerated "},{type:b,tag:c,props:{},children:[{type:a,value:i}]},{type:a,value:"."}]}]},toc:{title:o,searchDepth:p,depth:p,links:[]}},template:"Docs"},templateOptions:{header:h,footer:h,aside:h,asideClass:o,fluid:g,banner:g},_img:{}}],fetch:{"0":{headerLinks:[{title:"Getting Started",to:"\u002Fgetting-started\u002Fquick-start"},{title:"Guide",to:"\u002Fguide\u002Fconcepts\u002Fintroduction"},{title:"API",to:"\u002Fapi\u002Fcomposables\u002Fuse-async-data"},{title:"Examples",to:"\u002Fexamples\u002Fessentials\u002Fhello-world"},{title:"Community",to:"\u002Fcommunity\u002Fgetting-help"}]},"1":{repoUrl:"https:\u002F\u002Fgithub.com\u002Fnuxt\u002Fframework",prev:{slug:"package",to:"\u002Fguide\u002Fdirectory-structure\u002Fpackage",title:"package.json"},next:{slug:"node-server",to:"\u002Fguide\u002Fdeploy\u002Fnode-server",title:"Node.js Server"}},_lazyComponents:new Set(["ProseParagraph","ButtonLink","HomeHero","SectionContentItem","HomeFeatures","IconNuxtNitro","Headline","ProseStrong","ProseA","ProseCodeInline","NuxtContainer","IconNuxtBridge","ProseH3","ProseLi","ProseUl","List","ProseH1","ProseH2","ProseCode","Alert","CodeGroup","ProseEm","ReadMore","Sandbox","ProseTh","ProseTr","ProseThead","ProseTd","ProseTbody","ProseTable","ProseBlockquote","ProseImg","NeedContribution","LinkExample","ProseOl","ProseH4"])},mutations:l}}("text","element","prose-code-inline","\n","span","token",false,true,"tsconfig","tsconfig.json","TypeScript configuration file",void 0,"prose-paragraph","punctuation","",2)));